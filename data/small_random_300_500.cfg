
max_trainset_types = 2;

max_len = 2; // maximal len of train, n of trainsets
max_cap = 1000; // maximal capacity of each train, in seats

time_horizon = 10950; // = 30 years with ca 365 days
mod_cost = 1.1; // modernization cost; +10% of purchase cost that will be payed during the 30 years use

n_trainset_types = 2;
t_available = [100, 100]; // availability of trainsets
t_seats = [300, 500];  // number of seats for each trainsets
t_investment = [600000000, 750000000];  // purchase cost


el_cost = [19, 33]; // cost electricity for 1 km
fe_cost = [21, 35]; // cost for fee for using rail tracks for 1 km
re_cost = [66, 110]; // cost for maintenance for 1 km

abroad_gain = [89, 149]; // gains for one km abroad

n_arcs = 3;

// Edges indices for nodes
win = 1; //  waiting in
wout = 2; // waiting out
sin = 3; // subconnection in
sout = 3; // subconnection out

n_stations = 6; // number of stations
n_edges = 150; // number of edges, n' of edges == n' of subconnection + n' waiting edges
n_subconn = 48; // number of subconnections, routes between two adjacent stations in times

pass_subconn = [290, 253, 302, 680, 189, 92, 185, 305, 124, 109, 29, 99, 490, 483, 119, 21, 164, 96, 456, 711, 480, 130, 52, 290, 492, 17, 795, 107, 22, 144, 300, 675, 646, 703, 192, 473, 184, 905, 29, 77, 318, 484, 169, 65, 5, 462, 78, 94];
distances_subconn = [63, 63, 63, 100, 199, 150, 63, 100, 199, 199, 63, 15, 63, 100, 199, 199, 100, 150, 150, 63, 100, 199, 199, 100, 63, 15, 63, 15, 199, 199, 100, 150, 150, 63, 100, 63, 15, 63, 15, 199, 150, 150, 15, 15, 199, 150, 15, 199];
distance_abroad = [83, 0, 322, 83, 0, 322, 83, 0, 322, 83, 0, 322, 322, 0, 0, 322, 0, 0, 322, 0, 0, 322, 0, 0, 183, 0, 83, 183, 0, 83, 183, 0, 83, 183, 0, 83, 83, 0, 183, 83, 0, 183, 83, 0, 183, 83, 0, 183];



// Out and in nodes
// first is always in, second out, those are waiting edges
// third value depends on array, this is actual train trip

// example in array out_nodes: [49,50,1] means that edge 49 is coming in, edge 50 is coming out and edge 1 is also coming out
// also we can find edge 49 on source edge array, which means that this edge goes from source
out_nodes = ([49, 50, 4], [50, 51, 8], [51, 52, 14], [52, 53, 21], [60, 61, 10], [61, 62, 17], [64, 65, 16], [65, 66, 24], [68, 69, 23], [69, 70, 31], [72, 73, 30], [73, 74, 35], [80, 81, 5], [82, 83, 6], [84, 85, 9], [86, 87, 15], [88, 89, 20], [90, 91, 18], [92, 93, 22], [94, 95, 27], [96, 97, 29], [98, 99, 34], [100, 101, 32], [102, 103, 38], [104, 105, 40], [106, 107, 41], [108, 109, 45], [110, 111, 48], [112, 113, 1], [113, 114, 2], [114, 115, 3], [115, 116, 7], [116, 117, 11], [117, 118, 13], [118, 119, 25], [121, 122, 36], [126, 127, 28], [128, 129, 19], [130, 131, 39], [132, 133, 33], [134, 135, 44], [136, 137, 42], [138, 139, 47], [140, 141, 46], [142, 143, 12], [143, 144, 26], [144, 145, 37], [146, 147, 43]);
in_nodes = ([53, 54, 17], [54, 55, 24], [55, 56, 31], [56, 57, 35], [58, 59, 4], [59, 60, 5], [62, 63, 8], [63, 64, 9], [66, 67, 14], [67, 68, 15], [70, 71, 21], [71, 72, 22], [74, 75, 29], [75, 76, 40], [76, 77, 45], [77, 78, 48], [79, 80, 1], [81, 82, 2], [83, 84, 3], [85, 86, 7], [87, 88, 10], [89, 90, 11], [91, 92, 13], [93, 94, 16], [95, 96, 19], [97, 98, 23], [99, 100, 25], [101, 102, 30], [103, 104, 33], [105, 106, 36], [107, 108, 42], [109, 110, 46], [119, 120, 20], [120, 121, 27], [122, 123, 34], [123, 124, 38], [125, 126, 6], [127, 128, 12], [129, 130, 18], [131, 132, 26], [133, 134, 32], [135, 136, 37], [137, 138, 41], [139, 140, 43], [145, 146, 28], [147, 148, 39], [148, 149, 44], [149, 150, 47]);

// waiting edges going to each station at the morning

// waiting edges going from each station at the night
source_edges = [49, 58, 79, 112, 125, 142];
sink_edges = [57, 78, 111, 124, 141, 150];
